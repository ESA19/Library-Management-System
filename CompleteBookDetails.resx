<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>